# NeetCode System Design

System design notes from NeetCode courses

## 1. Background

### Computer Architecture

- Disks are **persistent**, data lives whether computer is in on/off state
- **RAM (random access memory)** is non-persistent and can be used to quickly read/write data (microseconds) vs on disk (milliseconds)
- CPU is intermediary between RAM and disk and reads/writes data from either
- CPUs also have a cache (L1, L2, and L3) which is even faster to read/write from vs RAM or disk but has limited memory (up to ~10 MB)
- **Moore's Law** is an observation which suggests that the number of transistors in a CPU doubles every two years. However, in recent years this trend has begun to slow

### Application Architecture

- **Vertical scaling** is when components within the same computer is being upgraded but has limitations in terms of hardware and availability
- **Horizontal scaling** is typically the preferred approach of creating more servers to evenly distribute requests and ensure availability
- **Load balancers** evenly distributes incoming requests to groups of servers
- **Logging** services provide a way to view application state history and activity. These are usually written to another external server for reliability
- **Metric** services on the other hand, provide a view into the server environment (e.g., CPU usage, network traffic, etc.)

### Design Requirements

- System design can be boiled down to three points: moving, storing, and transforming data or **ETL (extract, transform, load)**
- **Availability** is the percentage of time the system is up and running for a given period of time
- **Reliability** is a system's ability to perform its intended operation without failure or errors over a given period of time
- **Fault-tolerance** is how well the system can detect and heal itself from a problem (typically switching to another server). To achieve fault-tolerance requires a redundant server to be on standby. In most cases, systems use **active-active redundancy** where more than one server is active
- **Throughput** is the amount of data or operations a system can handle over some period of time
- **Latency** is the delay between the client and server during a request/response

## 2. Networking

## 3. APIs

## 4. Caching Basics

## 5. Proxies

## 6. Storage

## 7. Big Data
