# NeetCode System Design

System design notes from NeetCode courses

## 1. Background

### Computer Architecture

- Disks are **persistent**, data lives whether computer is in on/off state
- **RAM (random access memory)** is non-persistent and can be used to quickly read/write data (microseconds) vs on disk (milliseconds)
- CPU is intermediary between RAM and disk and reads/writes data from either
- CPUs also have a cache (L1, L2, and L3) which is even faster to read/write from vs RAM or disk but has limited memory (up to ~10 MB)
- **Moore's Law** is an observation which suggests that the number of transistors in a CPU doubles every two years. However, in recent years this trend has begun to slow

### Application Architecture

- **Vertical scaling** is when components within the same computer is being upgraded but has limitations in terms of hardware and availability
- **Horizontal scaling** is the preferred approach of creating more servers to evenly distribute requests and ensure availability
- **Load balancers** evenly distributes incoming requests to groups of servers
- **Logging** services provide a way to view application state history and activity. These are usually written to another external server for reliability
- **Metric** services on the other hand, provide a view into the server environment (e.g., CPU usage, network traffic, etc.)

### Design Requirements

- System design can be boiled down to three points: moving, storing, and transforming data or **ETL (extract, transform, load)**
- **Availability** is the percentage of time the system is up and running for a given period of time
- **Reliability** is a system's ability to perform its intended operation without failure or errors over a given period of time
- **Fault-tolerance** is how well the system can detect and heal itself from a problem (switching to another server). To achieve fault-tolerance requires a redundant server to be on standby. In most cases, systems use **active-active redundancy** where more than one server is active
- **Throughput** is the amount of data or operations a system can handle over some period of time
- **Latency** is the delay between the client and server during a request/response

## 2. Networking

### Networking Basics

- A **network** is a collection of interconnected devices, such as computers, servers, routers, switches, and other networking equipment, that are linked together to facilitate communication and the sharing of resource
- An **IP address** is a distinct numeric identifier (IPv4 - 32-bit and IPv6 - 128-bit) for every device connected to a network
- **TCP packets** include an IP header (e.g., source and destination IP), TCP header (e.g., for sequencing), and application data
- **Public networks** are accessible by internet where a public IP is granted by an ISP (Internet Service Provider) whereas a **private network** is only accessible within a LAN (local area network)
- **Dynamic IPs** are assigned to a device each time a connection is established with a network whereas a **static IP** requires manual configuration
- **Ports** are numeric identifiers (16-bit integer, 0-65535) used to distinguish between multiple applications or services running on a single device

### TCP and UDP

- TCP utilizes a **3-way handshake** (SYN - synchronize, SYN-ACK - synchronize acknowledgement, and ACK - acknowledgement) between devices to establish a connection and ensure lost packets are reliably delivered. However, this has the drawback of having more overhead
- **UDP (User Datagram Protocol)** on the other hand, has faster data transfer as it does not attempt to resend lost packets or reorder them. A common use case for UDP is online gaming or video streaming

### DNS

- **DNS (Domain Name System)** is a decentralized _phone book_ which converts readable website names into numerical IPs. Coordination, security, and operation of domain names is managed by ICANN (Internet Corporation for Assigned Names and Numbers)
- **Domain Name Registrars** (e.g., Google Domains, Route53, GoDaddy, etc.) maintain the DNS records and ensure domains are registered properly
- An **A record** is a DNS record which associates a domain name with an IPv4 address
- There are different types of protocols for URLs (uniform resource locators):
  - HTTP/HTTPS (Hypertext Transfer Protocol) is the most common web protocol that governs communication between web browsers and servers and acts as a layer on top of TCP
  - FTP (File Transfer Protocol) - used for accessing files and directories on a remote server
  - SSH (Secure Shell) - used for establishing secure remote connections to another server
- A domain consists of three parts: subdomain (e.g., `chat` in `https://chat.openai.com/`), domain (e.g., `openai.com` in `https://chat.openai.com/`), and top-level domain (e.g., `.com`)
- A _path_ is denoted after a `/` and signifies a specific location or route within the website where particular content or resources are located

## 3. APIs

### HTTP

- **Client** refers to an application or system that access a service made available by a server. The client can be a web browser, an email software, an app on your phone, or any other software that needs to access some service
- **Server** refers to a computer, device, or software the providers resources, data, services, or functionality to the client or other servers on a network
- **RPC (remote procedure call)** provides the ability for a program to perform functions on another machine, making it a simple and efficient solution for task management in distributed systems, where programs operate across multiple computers
- HTTP requests/responses can include a method (GET, POST, PUT, DELETE), URL, headers, and body (for POST and PUT). Regarding HTTP methods:
  - **GET** methods are idempotent (no change of server state) so the act of retrieving the resource itself should not cause any modifications (no _side effects_)
  - **POST** methods will send data to the server to create a new resource
  - **PUT** methods are used to update a resource and is also idempotent (identical requests give the same result)
  - **DELETE** methods will delete the specified data and is also idempotent
- Common HTTP status codes include:
  - 200: OK
  - 201: Created
  - 400: Bad Request
  - 401: Unauthorized
- **SSL/TLS (Secure Sockets Layer/Transport Security Layer)** are cryptographic protocols used to provide secure communication over a computer network. HTTPS is a combination of HTTP with TLS

### WebSockets

- **WebSockets** is a communication protocol that provides full-duplex communication channels over a single TCP connection. Both the client and the server can send data to each other simultaneously without the need for a request-response cycle once the initial connection has been established
- The introduction of HTTP/2 allows for **multiplexing** - multiple requests in parallel can be initiated over a single TCP connection. However, this is not a perfect replacement to WebSocket

### API Paradigms

- The three most popular API paradigms are:

  - **REST (Representational State Transfer)** which utilizes HTTP for communication between client and server
    - Pros: REST APIs require a client-server architecture to enable independent development. Additionally, REST APIs are stateless - servers should not retain any details on previous client requests (no session or cookie management)
    - Cons: over/under-fetching data is possible as applications become more complex
  - **GraphQL** addresses the over/under-fetching limitations of REST APIs through **queries** and **mutations** (retrieving data and modifying data on the server respectively)
    - Pros: operates through a single HTTP POST endpoint and enables clients to specify required data through a strongly-typed schema
    - Cons: requires additional setup, tooling, and properly defining the schema in advance. Security could also be an issue since GraphQL enables clients to query any data they need
  - **gRPC (Google Remote Procedure Call)** is a framework for executing RPCs which allows a program to execute a procedure on another computer or shared network. Used for server-server communication, it is most similar to WebSockets and providers bi-directional communication or multiplexing
    - Pros: sends data using **protobufs (Protocol Buffers)** a language-neutral, platform-neutral extensible mechanism for serializing structured data to reduce payload and increase performance and efficiency
    - Cons: does not support error codes provided by HTTP so server messages must be customized, requires additional setup and properly defining API contracts using protobufs

- **JSON (JavaScript Object Notation)** is a widely used data format in web services where data is structured as key-value pairs

### API Design

- APIs provide **CRUD (Create, Read, Update, Delete)** functions which are equivalent to GET, POST, PUT, and DELETE HTTP/REST methods
- It is important to consider backward compatibility when designing endpoint such that disruptions are avoided or minimized (e.g., adding an optional instead of a required parameter to an endpoint)
- Incorporating `limit` and `offset` query parameters enables clients to specify a specific range or slice of records to retrieve
- **API versioning** is used to document a significant change to an API such that developers can be able to make changes accordingly
